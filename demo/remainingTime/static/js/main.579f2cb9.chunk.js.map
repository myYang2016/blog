{"version":3,"sources":["components/timer/index.js","components/selectType/index.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","dh","document","documentElement","clientHeight","dw","clientWidth","size","t","getResidueTime","timeSize","dotSize","state","dotL","dotT","ctx","lineWidth","this","interval","setInterval","tick","initCanvas","clearInterval","setState","dayNum","prop","nowTime","Date","y","getFullYear","m","getMonth","d","getDate","type","residueTime","today","getTime","tomorrow","Math","floor","liveYear","yd","c","h","mi","s","addZero","n","String","length","result","drawStart","PI","angle","drawEnd","clearCanvas","drawArc","start","end","color","setDotPort","getElementById","getContext","setTimeout","r","strokeStyle","beginPath","arc","stroke","canvas","width","x","dotR","sin","cos","className","style","height","id","left","top","React","Component","SelectType","onChange","handleSlecteType","bind","Object","keys","showType","map","key","value","e","$select","target","i","selectedIndex","changeType","options","thisYear","live","App","currentType","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.579f2cb9.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    const dh = document.documentElement.clientHeight;\n    const dw = document.documentElement.clientWidth;\n    const size = dh > dw ? dw : dh;\n    const t = this.getResidueTime();\n    const timeSize = size * .8;\n    const dotSize = size * .08;\n    this.state = {\n      t,\n      timeSize,\n      dotSize,\n      dotL: (timeSize - dotSize) / 2,\n      dotT: -dotSize / 2,\n      ctx: null,\n      lineWidth: 5,\n    }\n  }\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.tick();\n    }, 1000);\n    this.initCanvas();\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  tick() {\n    const t = this.getResidueTime();\n    this.setState({ t })\n  }\n  getResidueTime() {\n    const nowTime = new Date();\n    const y = nowTime.getFullYear();\n    const m = nowTime.getMonth() + 1;\n    const d = nowTime.getDate();\n    const { type = 'today' } = this.props || {};\n    let residueTime = nowTime;\n    const dayTime = 24 * 60 * 60 * 1000;\n    let dayNum;\n    let prop;\n    if (type === 'today') {\n      const today = new Date(`${y}/${m}/${d}`).getTime();\n      const tomorrow = new Date(today + dayTime).getTime();\n      residueTime = Math.floor((tomorrow - nowTime.getTime()) / 1000);\n      prop = (tomorrow - nowTime.getTime()) / dayTime;\n    } else if (type === 'thisYear' || type === 'live') {\n      const { liveYear = 50 } = this.props || {};\n      const year = y + (type === 'thisYear' ? 1 : liveYear);\n      const yd = new Date(`${year}/1/1`).getTime();\n      const c = yd - nowTime.getTime();\n      prop = c / (yd - new Date(`${y}/1/1`).getTime());\n      dayNum = Math.floor(c / dayTime);\n      residueTime = Math.floor((c % dayTime) / 1000);\n    }\n    const h = Math.floor(residueTime / 60 / 60);\n    const mi = Math.floor((residueTime - h * 60 * 60) / 60);\n    const s = Math.floor(residueTime - h * 60 * 60 - mi * 60);\n    const addZero = n => String(n).length === 1 ? `0${n}` : n;\n    const result = `${addZero(h)}:${addZero(mi)}:${addZero(s)}`;\n    const drawStart = -Math.PI / 2;\n    const angle = Math.PI * 2 * (1 - prop);\n    const drawEnd = angle + drawStart;\n    this.clearCanvas();\n    this.drawArc({\n      start: drawStart,\n      end: drawEnd,\n      color: '#aaa',\n    });\n    this.drawArc({\n      start: drawEnd,\n      end: drawStart,\n    });\n    this.setDotPort(angle);\n    return type === 'today' ? result : `${dayNum}å¤© ${result}`;\n  }\n  initCanvas() {\n    const $canvas = document.getElementById('timeCanvas');\n    const ctx = $canvas.getContext('2d');\n    this.setState({ ctx });\n    setTimeout(() => {\n      this.drawArc();\n    });\n  }\n  drawArc({ start = 0, end = Math.PI * 2, color = \"#ea9999\" } = {}) {\n    if (!this.state) return;\n    const r = this.state.timeSize / 2;\n    const ctx = this.state.ctx;\n    ctx.lineWidth = this.state.lineWidth;\n    ctx.strokeStyle = color;\n    ctx.beginPath();\n    ctx.arc(r, r, r - this.state.lineWidth, start, end);\n    ctx.stroke();\n  }\n  clearCanvas() {\n    if (!this.state) return;\n    const canvas = document.getElementById('timeCanvas');\n    const ctx = this.state.ctx;\n    canvas.width = this.state.timeSize;\n    ctx.lineWidth = this.state.lineWidth;\n  }\n  setDotPort(angle) {\n    if (!this.state) return;\n    let x;\n    let y;\n    const r = this.state.timeSize / 2;\n    const dotR = this.state.dotSize / 2;\n    if (angle < Math.PI / 2) {\n      x = Math.sin(angle) * r;\n      y = Math.cos(angle) * r;\n    } else if (angle > Math.PI / 2 && angle < Math.PI) {\n      angle = angle - Math.PI / 2;\n      x = Math.cos(angle) * r;\n      y = -Math.sin(angle) * r;\n    } else if (angle > Math.PI && angle < Math.PI * 3 / 2) {\n      angle = angle - Math.PI;\n      x = -Math.sin(angle) * r;\n      y = -Math.cos(angle) * r;\n    } else {\n      angle = angle - Math.PI * 3 / 2;\n      x = -Math.cos(angle) * r;\n      y = Math.sin(angle) * r;\n    }\n    this.setState({\n      dotL: x + r - dotR,\n      dotT: r - y - dotR,\n    });\n  }\n  render() {\n    return (\n      <div\n        className=\"timeProgress\"\n        style={{\n          width: `${this.state.timeSize}px`,\n          height: `${this.state.timeSize}px`\n        }}>\n        <div\n          className=\"timeProgress-time\">\n          {this.state.t}\n        </div>\n        <canvas className=\"timeProgress-canvas\" id=\"timeCanvas\" width={this.state.timeSize} height={this.state.timeSize}></canvas>\n        <div\n          className=\"timeProgress-dot\"\n          style={{\n            width: `${this.state.dotSize}px`,\n            height: `${this.state.dotSize}px`,\n            left: `${this.state.dotL}px`,\n            top: `${this.state.dotT}px`,\n          }}\n        >\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Timer;","import React from 'react';\nimport './style.css';\n\nclass SelectType extends React.Component {\n  render() {\n    return (\n      <div className=\"selectType\">\n        <div className=\"timeType_out\">\n          <select onChange={this.handleSlecteType.bind(this)} className=\"timeType\">\n            {Object.keys(this.props.showType).map(\n              type => <option className=\"timeType-option\" key={type} value={type}>ä»{this.props.showType[type]}å©ä½æ¶é´</option>\n            )}\n          </select>\n        </div>\n      </div>\n    )\n  }\n  handleSlecteType(e) {\n    const $select = e.target;\n    if (!$select) return;\n    const i = $select.selectedIndex;\n    if (this.props.changeType) this.props.changeType($select.options[i].value);\n  }\n}\n\nexport default SelectType;","import React from 'react';\nimport './App.css';\nimport Timer from './components/timer';\nimport SelectType from './components/selectType';\n\nconst showType = {\n  today: 'æ¥',\n  thisYear: 'å¹´',\n  live: 'ç',\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentType: 'today',\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <SelectType showType={showType} changeType={this.changeType.bind(this)} />\n        <Timer type={this.state.currentType} showType={showType} />\n      </div>\n    )\n  }\n  changeType(type) {\n    this.setState({\n      currentType: type\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}